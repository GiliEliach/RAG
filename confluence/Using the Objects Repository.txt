Using the Objects Repository
VeriSoft framework supports object repositories. It is a very similar solution to the page factory pattern.
General
In order to use the Object repository feature you will need to do the following:
1. Create an object repository, which is a JSON file with a specific format.
2. Annotate your WebElement objects in your page object accordingly.
3. Initialize the WebElements (not needed if you derive your page object from BasePage)
4. Use the WebElement objects like in any other page object.
 
Repository Logic
Each object in the object repository has a unique id. This unique id is called objectId. For each object there can be several fitting 
locators. For each objectId there is a defined array of locators, each locator has a type, a value, and a grade. A higher grade means a 
stronger locator. You can use each locator strategy more than once. For instance, you can define 2 XPath locators.
When calling the WebElement, the framework will sort all the locators from the strongest (with a higher grade) to the weaker (with a lower 
grade) and try to apply the findElement method. Note! Currently, there is no support for a list of WebElements. Once a locator strategy 
finds an object on the DOM and the WebElement is created, the framework uses this locator for the current action. This logic repeats every 
time the WebElement is being used.
 
Structure of the object repository JSON file:
Currently, you will need to follow these instructions precisely:
The file structure look like this:
1{
2  "objectsRepository" : [
3    {
4      "objectId" : "WIKI-MAIN-SEARCH" ,
5      "pageName" : "WikiMainPage" ,
6      "locators" : [
7        {
8          "type": "id",
9          "value": "searchInput" ,
10          "grade": 80
11        },
12        {
13          "type": "xpath",
14          "value": "//badXpath" ,
15          "grade": 90
16        },
17        {
18          "type": "css",
19          "value": "#NoCss" ,
20          "grade": 50
21        }
22      ]
23    },
24    { 
The Page Object
In the page object, the only difference is the way we reference the WebElement:
If you extend VeriSoftâ€™s BasePage (WebBasePage, MobileBasePage, BasePage) you don't need anything else. If you do not extend either 
of these classes you will have to call ObjectReporsitoryFactory.initObjects in your constructor like this:
 
A full-page object which uses the object repository should look like this:
25      "objectId" : "WIKI-SEARCH-BAR" ,
26      "pageName" : "WikiMainPage" ,
27      "locators" : [
28        {
29          "type": "xpath",
30          "value": "//input[@name='search']" ,
31          "grade": 10
32        },
33        {
34          "type": "id",
35          "value": "BadId",
36          "grade": 80
37        },
38        {
39          "type": "css",
40          "value": "#BadCss" ,
41          "grade": 50
42        }
43      ]
44    }
45  ]
46}        
1@ObjectRepositoryItem (id = "WIKI-MAIN-SEARCH" )
2private WebElement  searchBar ;
1public ObjectRepositoryStandAloneWikipediaPageObject (WebDriver  driver) {
2    ObjectReporsitoryFactory .initObjects (driver, this);
3}
1public class ObjectRepoWikipediaMainPage  extends WebBasePage  {
2
3    @ObjectRepositoryItem (id = "WIKI-MAIN-SEARCH" )
4    private WebElement  searchBar ;
5
6    public static final String pageUrl = "https://www.wikipedia.org/" ;
7
8
9    /**
10     * C-tor. Initializes generic properties such as timeOut and pollingInterval
11     *
12     * @param driver a WebDriver object to store and use
13     */
14    public ObjectRepoWikipediaMainPage (WebDriver  driver) {
15        super(driver);
16    }
17You can find this code, as well as a stand-alone page object here.
A test will look like this:
 
Repository file Location
The default path for the file is src/test/resources/objectRepository.json
To support another location or multiple locations for the object repository file in the VeriSoft framework, you can modify the implementation 
by following on of two options:
Option 1: Use root.config.properties Property
1. Set a Property in the Configuration File: Add a property in root.config.properties file (located in the test/resources folder) for the 
path to the desired object repository file. the property name is object.repository.path
18
19    @Override
20    public boolean isOnPage () {
21        return searchBar .isDisplayed ();
22    }
23
24
25    public ObjectRepoWikipediaResultPage  searchForTerm (String term){
26        searchBar .sendKeys (term);
27        new Actions(driver).sendKeys (Keys.ENTER).build().perform();
28        return new ObjectRepoWikipediaResultPage (driver);
29    }
30
31
32    public ObjectRepoWikipediaMainPage  gotoPage (){
33        driver .get(pageUrl);
34        return this;
35    }
36}
1 @Test
2 @DisplayName ("Search Wikipedia with Page Objects using the Object Repository" )
3 @Description ("This test has a description" )
4 public void searchWikipediaWithPageObjectsRepository (VerisoftDriver  driver) {
5
6    String phraseToSearch = "Test Automation" ;
7    ObjectRepoWikipediaMainPage  wikipediaMainPage = new ObjectRepoWikipediaMainPage (driver);
8    ObjectRepoWikipediaResultPage  resultPage = 
9                                 wikipediaMainPage .gotoPage ().searchForTerm (phraseToSearch );
10
11    // Note!! Verisoft Assert
12    Asserts.assertTrue (resultPage .isOnPage (), "Should be on the result page" );
13    Report.info("We reaeched the result page" );
14
15    Asserts.assertTrue (resultPage .getPageTitle ().toLowerCase (Locale.ROOT)
16            .contains (phraseToSearch .toLowerCase ()), 
17                        "Title should containt the pharse "  + phraseToSearch );
18}
1object.repository.path=src/test/resources/myObjectRepository.jsonOption 2: Pass the Path in the Constructor
Define a Custom Page Class: Create a specialized page class that accepts an object repository path in its constructor.
Use Custom Page Class in Your Tests: Instantiate your page class with a specific object repository path in your test.
Default Object Repository Location
If no specific path is provided either via configuration or through the constructor, the framework falls back to the default path 
(src/test/resources/objectRepository.json). 
 
Want to learn more about the mechanism? Read about it here.
1public class SpecificObjectRepoWikipediaMainPage  extends WebBasePage  {
2    @ObjectRepositoryItem (id = "WIKI-MAIN-SEARCH" )
3    private WebElement  searchBar ;
4    public static final String pageUrl = "https://www.wikipedia.org/" ;
5
6    /**
7     * Constructor that initializes the object repository with a specific path
8     * 
9     * @param driver a WebDriver object to store and use
10     * @param objectRepositoryPath  the custom path to the object repository file
11     */
12    public SpecificObjectRepoWikipediaMainPage (WebDriver  driver, String objectRepositoryPath ) {
13        super(driver, objectRepositoryPath );
14    }
15
16    @Override
17    public boolean isOnPage () {
18        return searchBar .isDisplayed ();
19    }
20
21    public ObjectRepoWikipediaResultPage  searchForTerm (String term) {
22        searchBar .sendKeys (term);
23        new Actions(driver).sendKeys (Keys.ENTER).build().perform();
24        return new ObjectRepoWikipediaResultPage (driver);
25    }
26
27    public SpecificObjectRepoWikipediaMainPage  gotoPage () {
28        driver .get(pageUrl);
29        return this;
30    }
31}
32
1@Test
2@DisplayName("Search Wikipedia with Page Objects using Custom Object Repository Path")
3public void searchWikipediaWithSpecificRepo(VerisoftDriver driver) {
4    String phraseToSearch = "Test Automation";
5    SpecificObjectRepoWikipediaMainPage wikipediaMainPage = new SpecificObjectRepoWikipediaMainPage(
6        driver, "path/to/your/objectRepository.json"
7    );
8    ObjectRepoWikipediaResultPage resultPage = wikipediaMainPage.gotoPage().searchForTerm(phraseToSearch);
9    Asserts.assertTrue(resultPage.isOnPage(), "Should be on the result page");
10}
11