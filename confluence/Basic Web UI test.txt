Basic Web UI test
I can imagine the first thing you will want to do is to write a very simple and basic test - to heat up the engines. This page will guide you 
through the code:
 
Click here to expand...
Click here to expand...
Click here to expand...
Click here to expand...
Click here to expand...
1@Execution (ExecutionMode .CONCURRENT )
This line tells the JUnit engine that the tests in this class were designed to run in parallel. Note! In order for this line to work, there is a 
property file named junit-platform.properties located at src/test/resources folder
1public class BasicWebExampleTests  extends BaseTest {
We extend the class BaseTest. BaseTest is a class that was created in the examples repo. It mainly holds the annotations and keeps 
this code clean. 
1@DriverCapabilities
There are 3 main annotations you will need to be familiar with in order to get your driver up without any issues: @DriverCapabilities, 
@DriverUrl, and @DriverCommandExecutor.
The  @DriverCapabilities tells the VeriSoftDriver where to find the capabilities to use when starting up. We use dependency injection 
for injecting the WebDriver directly into the test. More on our dependency injection mechanism for the driver can be found here.
1private DesiredCapabilities  capabilities = new DesiredCapabilities ();
2    {
3        ChromeOptions  options = new ChromeOptions ();
4        options .addArguments ("--no-sandbox" );
5        options .addArguments ("--headless" );
6
7        capabilities .setBrowserName ("chrome" );
8        capabilities .setCapability ("browserVersion" , "113");
9        capabilities .setCapability ("driverVersion" , "113");
10        options .merge(capabilities );
11    }
Capabilities are pretty straightforward. Just note that the framework will look for platformName for web and mobile testing. 
platformName in this example comes from the ChromeOptions object.
1@Test
2@DisplayName ("Search Wikipedia test" )
Both lines are JUnit lines. The @DisplayName line is very important since if you use this annotation, then most of the report 
mechanisms will use it as the test name, rather than the method name.
1public void searchWikipedia (VerisoftDriver  driver)  {Click here to expand...
The next few lines are very basic Selenium code, so let’s fast-forward a bit
Click here to expand...
Click here to expand...
 
Well, that’s it! We made it through a basic web UI test. Here is the complete code, and you can also view it on BitbucketWe use a dependency injection mechanism, which takes the @DriverCapabilities, @DriverUrl, and @DriverCommandExecutor (if 
present) and creates an instance of VerisoftDriver. The VerisoftDriver object is an instance of WebDriver and follows its 
interfaces and more. More about the VeriSoftDriver and VerisoftMobileDriver can be found here.
1// Note!! Verisoft Assert
2Asserts.assertTrue (driver.getTitle ().contains (phraseToAssert ), 
3                "Page should contain the pharase "  + phraseToAssert );
Asserts in the Verisoft framework do pretty much the same as regular asserts. The difference here is that we log the message to the 
various logging and reporting mechanisms that are listening to out Observer Report mechanism. More about the Report in the following 
line. You may choose to use a different Assert mechanism (and there are plenty of those in Java, but you will lose this nice logging 
feature.
1Report.info("Got to this point - We are on the right page");
There are many places we want to write reports to - logging, report mechanism, perhaps a global logging system like Splunk, Jira,, etc. 
If we would write a line of code for each of the mechanisms we support, we would have more logging lines of code than actual code. 
So, we use the Observer pattern and use one single Report object to write to all of them. More about the Report object here.
1@Execution (ExecutionMode .CONCURRENT )
2public class BasicWebExampleTests  extends BaseTest {
3
4    @DriverCapabilities
5    private DesiredCapabilities  capabilities = new DesiredCapabilities ();
6    {
7        ChromeOptions  options = new ChromeOptions ();
8        options .addArguments ("--no-sandbox" );
9        options .addArguments ("--headless" );
10
11        capabilities .setBrowserName ("chrome" );
12        capabilities .setCapability ("browserVersion" , "113");
13        capabilities .setCapability ("driverVersion" , "113");
14        options .merge(capabilities );
15    }
16
17
18    @Test
19    @DisplayName ("Search Wikipedia test" )
20    public void searchWikipedia (VerisoftDriver  driver)  {
21        driver .get("https://www.wikipedia.org/" );
22        driver .findElement (By.id("searchInput" )).sendKeys ("Test Automation" );
23        new Actions(driver).sendKeys (Keys.ENTER).build().perform();
24
25        String phraseToAssert = "Test automation" ;
26
27        // Note!! Verisoft Assert
28        Asserts.assertTrue (driver.getTitle ().contains (phraseToAssert ), 29                             "Page should contain the pharase "  + phraseToAssert );
30
31        Report.info("Got to this point - We are on the right page" );
32    }
33}