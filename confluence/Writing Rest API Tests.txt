Writing Rest API Tests
The VeriSoft framework easily supports writing API tests. We implement API testing using  RestAssured . 
In writing API tests we need to mention numerous components:
Project Lombok - Project Lombok is a Java library that automatically plugs into your editor and, using annotations automatically writes 
boilerplate code.
RestAssured - RestAssured is a Java package, with abilities to test and validate Rest APIs 
Jackson - Jackson is a very popular and efficient Java-based library to serialize or map Java objects to JSON and vice versa.
The builder design pattern - Builder is a creational design pattern, which allows the construction of complex objects step by step
The Example API
The API we are going to use as an example is taken from the website
https://dummy.restapiexample.com
 In the following example, we will examine the get all employees API. The result of the API is a JSON file in the following way:
Our test will call the get all employees API, deserialize the JSON response and make sure there is at lease one employee
The Test
Here is the test case code:
1{
2"status" : "success" ,
3"data": [
4{
5"id": "1",
6"employee_name" : "Tiger Nixon" ,
7"employee_salary" : "320800" ,
8"employee_age" : "61",
9"profile_image" : ""
10 },
11 ....
12 ]
13}
1@Test
2public void getAllEmployees () throws JsonProcessingException  {
3
4    // Create the API request
5    ApiRequest  apiRequest = ApiRequest .builder()
6            .endpoint ("https://dummy.restapiexample.com" )
7            .method(Method.GET.toString ())
8            .build();
9
10    // Build a RestAssured request
11    RestAssured .baseURI = apiRequest .getEndpoint ();
12    RequestSpecification  request = prepareRequest (apiRequest );
13
14    // Send the request and get the response
15    Response  response = request .get("/api/v1/employees" ); 
We use the builder pattern to create an API request. The @Data and @Builder annotations are annotations from Project Lombok. The API 
request has the following structure:
On line 12 we use a private util method to prepare the request:
Create a new RestAssured object
Add the appropriate headers and authorization
Returns the created RestAssured object
Here is the implementation of the method:
Next in the test, we call the Rest API in line 15:
And now the magic happens - we use the Jackson library in order to deserialize the JSON response:
And the JSON is packed into the EmployeeWrapper object.
The EmployeeWrapper object
We unfold the JSON object and use JSON to POJO website to create the class structure. You can find the full class structure here. 
16    ObjectMapper  objectMapper = new ObjectMapper ();
17    EmployeesWrapper  employeesWrapper = 
18      objectMapper .readValue (response .getBody().asString (), EmployeesWrapper .class);
19
20    // Assert that the response is successful and the response body is not empty
21    Assertions .assertTrue (!employeesWrapper .data.isEmpty());
22}
1@Data
2@Builder
3public class ApiRequest {
4    private String endpoint;
5    private String method;
6    private String body;
7    private String headers;
8    private String authToken;
9}
1private RequestSpecification  prepareRequest (ApiRequest  apiRequest ) {
2    RequestSpecification  request = RestAssured .given();
3    request .header("Content-Type" , ContentType .XML);
4    request .header("Accept" , ContentType .XML);
5    if (apiRequest .getAuthToken () != null) {
6        request .header("Authorization" , "Bearer "  + apiRequest .getAuthToken ());
7    }
8    if (apiRequest .getBody() != null) {
9        request .body(apiRequest .getBody());
10    }
11    return request ;
12}
1Response response = request.get("/api/v1/employees");
1ObjectMapper  objectMapper = new ObjectMapper ();
2    EmployeesWrapper  employeesWrapper = 
3      objectMapper .readValue (response .getBody().asString (), EmployeesWrapper .class);